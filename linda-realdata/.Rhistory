fdr.sd <- as.vector(fdr.mat[, c(c(1:6),c(1:6)+12,c(1:6)+24,c(1:6)+36)+6][,ind])
data.plot <- cbind.data.frame(dataset=dataset, Method=Method,
cutoff=cutoff,
value1=fdr.val,
value2=num.rej)
fun <- function(setup, ylab = c("", "")) {
p1 <- ggplot(data = data.plot %>% filter(dataset == setup),
aes(x = cutoff, y = value1, group = Method)) +
geom_line(aes(color = Method), size = 0.8) +
#geom_point(aes(color = Method)) +
labs(title = setup, x = "", y = ylab[1]) +
theme_minimal(base_size = 15) +
scale_colour_manual(values = c('lightgrey', "lightcoral", "lightblue")) +
geom_abline(slope = 1, intercept = 0, color = "gray",
linetype = "dashed", size = 0.8)
p2 <- ggplot(data = data.plot %>% filter(dataset == setup),
aes(x = cutoff, y = value2, group = Method)) +
geom_line(aes(color = Method), size = 0.8) +
#geom_point(aes(color = Method)) +
labs(title = "", x = "", y = ylab[2]) +
theme_minimal(base_size = 15) +
scale_colour_manual(values = c('lightgrey', "lightcoral", "lightblue"))
return(list(p1, p2))
}
p1 <- fun('IBD-1', ylab = c('Empirical False Discovery Rate', 'Number of Discoveries'))
p2 <- fun('IBD-2')
p3 <- fun('IBD-3')
p4 <- fun('IBD-4')
big_plot <- ggarrange(plotlist = list(p1[[1]], p2[[1]], p3[[1]], p4[[1]],
p1[[2]], p2[[2]], p3[[2]], p4[[2]]),
nrow = 2, ncol = 4, common.legend = TRUE)
final_plot <- annotate_figure(
big_plot,
bottom = text_grob("Target FDR Level", size = 15)
)
pdf("curve_ancombc.pdf", width = 14, height = 8)
final_plot
dev.off()
5/8
1/16
1/8
1/12
5/16
library(VennDiagram)
pval.mat.list <- readRDS("pval.mat.list.rds")
library(gridExtra)
fun2 <- function(pval.mat, setup) {
n.met <- ncol(pval.mat)
qval.mat <- sapply(1 : n.met, function(i)
p.adjust(pval.mat[, i], method = 'BH'))
venn.list <- sapply(1 : n.met, function (i)
names((which(qval.mat[, i] <= cutoff))))
venn.plot <- venn.diagram(
x = venn.list,
category.names = method,
filename = NULL,
output = TRUE,
fill = c( "lightgrey", "lightcoral", "lightblue"),
alpha = 0.5,
cat.col = c("black", "red", "blue"),
cat.cex = 1,
cat.fontface = "bold",
main = setup,
main.cex = 1.5,
cat.dist = c(0.03, -0.02, 0.03)
)
return(venn.plot)
}
p1 <- fun2(pval.mat.list[[1]][, ind], 'IBD-1')
p2 <- fun2(pval.mat.list[[2]][, ind], 'IBD-2')
cutoff <- 0.1
ind <- c(1, 3, 5)
#ind <- c(2, 4, 6)
method <- c('LinDA', 'LinDA-BMDD', 'LinDA-SAVER')
#method <- c('ANCOMBC', 'ANCOMBC-BMDD', 'ANCOMBC-SAVER')
p1 <- fun2(pval.mat.list[[1]][, ind], 'IBD-1')
p2 <- fun2(pval.mat.list[[2]][, ind], 'IBD-2')
p3 <- fun2(pval.mat.list[[3]][, ind], 'IBD-3')
p4 <- fun2(pval.mat.list[[4]][, ind], 'IBD-4')
pdf("venn2.pdf", width = 8, height = 6)
grid.arrange(grobs = list(p1, p2, p3, p4), nrow = 2, ncol = 2,
padding = unit(c(2, 3, 3, 3), "cm"))
dev.off()
library(ggplot2)
library(ggpubr)
library(dplyr)
pval.mat.list <- readRDS("pval.mat.list.rds")
pval.mat.list
length(pval.mat.list)
pval.mat.list[[1]]
library(foreach)
num.rej.fun <- function(pval.mat, curve.fdr.cutoffs) {
qval.mat <- sapply(1 : ncol(pval.mat), function(i)
p.adjust(pval.mat[, i], method = 'BH'))
isna <- colSums(is.na(qval.mat)) == nrow(pval.mat)
num.rej <- t(sapply(1 : length(curve.fdr.cutoffs), function(i)
colSums(qval.mat <= curve.fdr.cutoffs[i], na.rm = TRUE)))
num.rej[, isna] <- NA
return(num.rej)
}
datanames <- c("IBD-1", "IBD-2", "IBD-3", "IBD-4")
n.dat <- length(datanames)
ind <- 1 : 6
n.met <- length(ind)
curve.fdr.cutoffs <- seq(0.01, 0.25, 0.01)
n.cut <- length(curve.fdr.cutoffs)
filenames <- list.files("output")
n.shuf <- length(filenames)
num.rej.list <- list()
exist.rej.list <- list()
num.rej <- NULL
exist.rej <- NULL
i=1
j=1
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
pval.mat.list
i
filenames
readRDS(paste0("output/", filenames[j]))[[1]]
readRDS(paste0("output/", filenames[j]))[[2]]
readRDS(paste0("output/", filenames[j]))[[3]]
readRDS(paste0("output/", filenames[j]))[[4]]
readRDS(paste0("output/", filenames[2]))[[1]]
j=1
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
pval.mat.list[[1]][, c(2, 4, 6)]
is.na(pval.mat.list[[1]][,c(2,4,6)])
apply(pval.mat.list[[1]][, c(2, 4, 6)], 2, fun(x) all(!is.na(x)))
j=1
i=1
filenames
i=1
j=1
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
res <- pval.mat.list[[i]][, c(2, 4, 6)]
res
is.na(res)
all(!is.na(res))
colSums(is.na(res))
colSums(is.na(res)) > 0
aa <- NULL
for(i in 1 : 4) {
res <- pval.mat.list[[i]][, c(2, 4, 6)]
aa <- append(aa, colSums(is.na(res)) > 0)
}
aa
foreach (j = 1 : n.shuf, .combine = 'rbinf') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
res <- pval.mat.list[[i]][, c(2, 4, 6)]
aa <- append(aa, colSums(is.na(res)) > 0)
}
aa
}
filenames <- list.files("output")
library(foreach)
foreach (j = 1 : n.shuf, .combine = 'rbinf') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
res <- pval.mat.list[[i]][, c(2, 4, 6)]
aa <- append(aa, colSums(is.na(res)) > 0)
}
aa
}
foreach (j = 1 : n.shuf, .combine = 'rbind') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
res <- pval.mat.list[[i]][, c(2, 4, 6)]
aa <- append(aa, colSums(is.na(res)) > 0)
}
aa
}
res <- foreach (j = 1 : n.shuf, .combine = 'rbind') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
aa <- append(aa, colSums(is.na(pval.mat.list[[i]][, c(2, 4, 6)])) > 0)
}
aa
}
res[, 1 : 3]
res[, 4 : 6]
res[, 7 : 9]
res[, 10 : 12]
j <- 1
i <- 1
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
pval.mat.list[[i]][, c(2, 4, 6)][, 1]
p.adjust(pval.mat.list[[i]][, c(2, 4, 6)][, 1], method = 'BH'))
p.adjust(pval.mat.list[[i]][, c(2, 4, 6)][, 1], method = 'BH')
pval.mat.list[[i]][, 2]
pval.mat.list[[i]][, 2]
pval <- pval.mat.list[[i]][, 2]
padj <- p.adjust(pval, method = 'BH')
padj < 0.1
pval <- pval.mat.list[[i]][, 2]
padj <- p.adjust(pval, method = 'BH')
sum(padj < 0.1)
res <- foreach (j = 1 : n.shuf, .combine = 'rbind') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
aa <- append(aa, colSums(is.na(pval.mat.list[[i]][, c(2, 4, 6)])) > 0)
}
aa
}
res[, 1 : 3]
res[, 4 : 6]
res[, 7 : 9]
res[, 10 : 12]
aa <- NULL
for(i in 1 : 4) {
pval <- pval.mat.list[[i]][, 2]
padj <- p.adjust(pval, method = 'BH')
aa <- aa.append(aa, sum(padj < 0.1))
}
aa <- NULL
for(i in 1 : 4) {
pval <- pval.mat.list[[i]][, 2]
padj <- p.adjust(pval, method = 'BH')
aa <- append(aa, sum(padj < 0.1))
}
aa
res <- foreach (j = 1 : n.shuf, .combine = 'rbind') %do% {
aa <- NULL
for(i in 1 : 4) {
pval <- pval.mat.list[[i]][, 2]
padj <- p.adjust(pval, method = 'BH')
aa <- append(aa, sum(padj < 0.1))
}
aa
}
res
res <- foreach (j = 1 : n.shuf, .combine = 'rbind') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
pval <- pval.mat.list[[i]][, 2]
padj <- p.adjust(pval, method = 'BH')
aa <- append(aa, sum(padj < 0.1))
}
aa
}
res
res <- foreach (j = 1 : n.shuf, .combine = 'rbind') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
pval <- pval.mat.list[[i]][, 4]
padj <- p.adjust(pval, method = 'BH')
aa <- append(aa, sum(padj < 0.1))
}
aa
}
res
res <- foreach (j = 1 : n.shuf, .combine = 'rbind') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
pval <- pval.mat.list[[i]][, 1]
padj <- p.adjust(pval, method = 'BH')
aa <- append(aa, sum(padj < 0.1))
}
aa
}
res
library(LinDA)
library(BMDD)
library(SAVER)
library(ANCOMBC)
library(phyloseq)
filenames <- list.files("IBD")
pval.mat.list <- list()
K <- 100
i=1
load(paste0("IBD/", filenames[i]))
res <- preprocess.fun(otu_table, metadata)
winsor.fun <- function(Y, quan) {
N <- colSums(Y)
P <- t(t(Y) / N)
cut <- apply(P, 1, quantile, quan)
Cut <- matrix(rep(cut, ncol(Y)), nrow(Y))
ind <- P > Cut
P[ind] <- Cut[ind]
Y <- round(t(t(P) * N))
return(Y)
}
preprocess.fun <- function(otu.tab, meta, prev.cut = 0.2, lib.cut = 1000,
winsor.quan = 0.97) {
keep.sam <- which(colSums(otu.tab) >= lib.cut)
Y <- otu.tab[, keep.sam]
Z <- as.data.frame(meta[keep.sam, ])
names(Z) <- names(meta)
rownames(Z) <- rownames(meta)[keep.sam]
keep.tax <- which(rowSums(Y > 0) / ncol(Y) >= prev.cut)
Y <- Y[keep.tax, ]
N <- colSums(Y)
keep.sam1 <- which(colSums(Y) >= 1)
Y1 <- Y[, keep.sam1]
Z1 <- as.data.frame(Z[keep.sam1, ])
names(Z1) <- names(Z)
rownames(Z1) <- rownames(Z)[keep.sam1]
Y1 <- winsor.fun(Y1, winsor.quan)
return(list(Y = Y1, Z = Z1, keep.sam = keep.sam[keep.sam1], keep.tax = keep.tax))
}
load(paste0("IBD/", filenames[i]))
res <- preprocess.fun(otu_table, metadata)
Y <- res$Y
Z <- res$Z$grp
Z <- as.data.frame(Z)
names(Z) <- 'grp'
rownames(Z) <- rownames(res$Z)
set.seed(666)
pmat <- run.fun(Y, Z, 'grp', K)
m <- nrow(Y)
n <- ncol(Y)
## LinDA
res <- linda(Y, Z, paste0('~', formula))
ncores <- 25
nshuf1 <- 1
nshuf2 <- 50
m <- nrow(Y)
n <- ncol(Y)
## LinDA
res <- linda(Y, Z, paste0('~', formula))
formula
ncores <- 25
nshuf1 <- 1
nshuf2 <- 50
formula <- 'grp'
m <- nrow(Y)
n <- ncol(Y)
## LinDA
res <- linda(Y, Z, paste0('~', formula))
pval.linda <- res$output[[1]]$pvalue
print('-----LinDA-----')
OTU = otu_table(Y, taxa_are_rows = TRUE)
META = sample_data(Z)
PHYSEQ = phyloseq(OTU, META)
res <- ancombc2(data = PHYSEQ, fix_formula = formula)
res$res
i=3
load(paste0("IBD/", filenames[i]))
res <- preprocess.fun(otu_table, metadata)
Y <- res$Y
Z <- res$Z$grp
Z <- as.data.frame(Z)
names(Z) <- 'grp'
rownames(Z) <- rownames(res$Z)
set.seed(666)
pmat <- run.fun(Y, Z, 'grp', K)
m <- nrow(Y)
n <- ncol(Y)
## LinDA
res <- linda(Y, Z, paste0('~', formula))
pval.linda <- res$output[[1]]$pvalue
print('-----LinDA-----')
OTU = otu_table(Y, taxa_are_rows = TRUE)
META = sample_data(Z)
PHYSEQ = phyloseq(OTU, META)
res <- ancombc2(data = PHYSEQ, fix_formula = formula)
pval.ancombc <- res$res[, 9]
print('-----ANCOMBC-----')
res$res
res$res[,9]
names(res$res)
i
i
i=1
load(paste0("IBD/", filenames[i]))
res <- preprocess.fun(otu_table, metadata)
Y <- res$Y
Z <- res$Z$grp
Z <- as.data.frame(Z)
names(Z) <- 'grp'
rownames(Z) <- rownames(res$Z)
set.seed(666)
m <- nrow(Y)
n <- ncol(Y)
## LinDA
res <- linda(Y, Z, paste0('~', formula))
pval.linda <- res$output[[1]]$pvalue
print('-----LinDA-----')
OTU = otu_table(Y, taxa_are_rows = TRUE)
META = sample_data(Z)
PHYSEQ = phyloseq(OTU, META)
res <- ancombc2(data = PHYSEQ, fix_formula = formula)
pval.ancombc <- res$res[, 9]
print('-----ANCOMBC-----')
res$res
res[,11]
res$res[,11]
res$res[,11] < 0.2
res <- foreach (j = 1 : n.shuf, .combine = 'rbind') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
pval <- pval.mat.list[[i]][, 2]
padj <- p.adjust(pval, method = 'BH')
aa <- append(aa, sum(padj < 0.1))
}
aa
}
res <- foreach (j = 1 : 100, .combine = 'rbind') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
pval <- pval.mat.list[[i]][, 2]
padj <- p.adjust(pval, method = 'BH')
aa <- append(aa, sum(padj < 0.1))
}
aa
}
filenames <- list.files("output")
library(foreach)
res <- foreach (j = 1 : 100, .combine = 'rbind') %do% {
pval.mat.list <- readRDS(paste0("output/", filenames[j]))
aa <- NULL
for(i in 1 : 4) {
pval <- pval.mat.list[[i]][, 2]
padj <- p.adjust(pval, method = 'BH')
aa <- append(aa, sum(padj < 0.1))
}
aa
}
res
i=1
load(paste0("IBD/", filenames[i]))
filenames <- list.files("IBD")
load(paste0("IBD/", filenames[i]))
ls
ls()
dim(otu_table)
sum(otu_table == 0)/(dim(otu_table)[1]*dim(otu_table)[2])
winsor.fun <- function(Y, quan) {
N <- colSums(Y)
P <- t(t(Y) / N)
cut <- apply(P, 1, quantile, quan)
Cut <- matrix(rep(cut, ncol(Y)), nrow(Y))
ind <- P > Cut
P[ind] <- Cut[ind]
Y <- round(t(t(P) * N))
return(Y)
}
preprocess.fun <- function(otu.tab, meta, prev.cut = 0.2, lib.cut = 1000,
winsor.quan = 0.97) {
keep.sam <- which(colSums(otu.tab) >= lib.cut)
Y <- otu.tab[, keep.sam]
Z <- as.data.frame(meta[keep.sam, ])
names(Z) <- names(meta)
rownames(Z) <- rownames(meta)[keep.sam]
keep.tax <- which(rowSums(Y > 0) / ncol(Y) >= prev.cut)
Y <- Y[keep.tax, ]
N <- colSums(Y)
keep.sam1 <- which(colSums(Y) >= 1)
Y1 <- Y[, keep.sam1]
Z1 <- as.data.frame(Z[keep.sam1, ])
names(Z1) <- names(Z)
rownames(Z1) <- rownames(Z)[keep.sam1]
Y1 <- winsor.fun(Y1, winsor.quan)
return(list(Y = Y1, Z = Z1, keep.sam = keep.sam[keep.sam1], keep.tax = keep.tax))
}
zero.fun <- function(X) {
if(any(X == 0)) {
X <- t(apply(X, 1, function (x) {
if(all(x == 0)) {
x[x == 0] <- min(X[X != 0])
} else {
x[x == 0] <- min(x[x != 0])
}
return(x)
}))
}
return(X)
}
res <- preprocess.fun(otu_table, metadata)
dim(Y)
Y <- res$Y
dim(Y)
sum(Y==0)/(dim(Y)[1]*dim(Y[2]))
Y
sum(Y==0)/(dim(Y)[1]*dim(Y)[2])
for(i in 1 : 4) {
load(paste0("IBD/", filenames[i]))
dim(otu_table)
sum(otu_table==0)/(dim(otu_table)[1]*dim(otu_table)[2])
res <- preprocess.fun(otu_table, metadata)
Y <- res$Y
dim(Y)
sum(Y==0)/(dim(otu_table)[1]*dim(Y)[2])
}
for(i in 1 : 4) {
load(paste0("IBD/", filenames[i]))
print(dim(otu_table))
print(sum(otu_table==0)/(dim(otu_table)[1]*dim(otu_table)[2]))
res <- preprocess.fun(otu_table, metadata)
Y <- res$Y
print(dim(Y))
print(sum(Y==0)/(dim(otu_table)[1]*dim(Y)[2]))
}
for(i in 1 : 4) {
load(paste0("IBD/", filenames[i]))
print(dim(otu_table))
print(sum(otu_table==0)/(dim(otu_table)[1]*dim(otu_table)[2]))
res <- preprocess.fun(otu_table, metadata)
Y <- res$Y
print(dim(Y))
print(sum(Y==0)/(dim(Y)[1]*dim(Y)[2]))
}

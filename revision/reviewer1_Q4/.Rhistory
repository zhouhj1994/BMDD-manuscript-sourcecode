source('competing_fun.R')
source('evaluate_fun.R')
set.seed(ii)
if(type == 'Theoretical') {
source('data_generation.R')
data <- data.generation(alp0, alp1, pi, m, n, a, b, q, r, Z, U)
} else if(type == 'Correlation') {
source('data_generation2.R')
data <- data.generation2(m, n, a, b, q, r, model)
} else if(type == 'Non-parametric') {
source('data_generation3.R')
data <- data.generation3(otu.tab, m, n, a, b, q, r)
} else if(type == 'Theoretical2') {
source('data_generation.R')
data <- data.generation(alp0, alp1, pi, m, n, a, b, q, r, Z, U)
}
W <- data$W
X <- data$X
Z <- data$Z
U <- data$U
if(!is.null(Z)) Z <- data.frame(Z)
if(!is.null(U)) U <- data.frame(U)
Xhat.list <- competing.fun(W, Z, U, scImpute.folder = scImpute.folder, ii = ii)
res <- evaluate.fun(Xhat.list, X)
##########
Xhat <- Xhat.list[[1]]
corXhat <- array(1, c(m, m))
tmp <- (lowerTriangle(corXhat) - lowerTriangle(cor(t(X)))) ^ 2
Mtt <- mean(tmp)
Mtt.r <- median(tmp)
res[c(3, 20, 17, 34), 1] <- c(NA, NA, Mtt, Mtt.r)
##########
saveRDS(list(W = W, X = X, Xhat.list = Xhat.list, res = res),
paste0(output.folder, ii, ".rds"))
library(future)
library(doSNOW)
cl <- makeCluster(10, type = "SOCK")
registerDoSNOW(cl)
nsim <- 10
m <- 100
n <- 80
a <- 1000
b <- 0.5
q <- 6
r <- 0
###########################
type <- 'Theoretical'
s <- 1
setup <- 'S1'
if(type %in% c('Theoretical', 'Correlation', 'Theoretical2')) {
scImpute.folder <- paste0('scImpute/', setup, '/m_', m, '_n_', n, '_a_', a,
'_b_', b, '_q_', q, '_r_', r, '/')
output.folder <- paste0('output/', setup, '/m_', m, '_n_', n, '_a_', a,
'_b_', b, '_q_', q, '_r_', r, '/')
} else if(type == 'Non-parametric') {
scImpute.folder <- paste0('scImpute/', setup, '/m_', m, '_n_', n, '/')
output.folder <- paste0('output/', setup, '/m_', m, '_n_', n, '/')
}
if(!dir.exists(scImpute.folder)) dir.create(scImpute.folder)
if(!dir.exists(output.folder)) dir.create(output.folder)
if(type %in% c('Theoretical', 'Theoretical2')) {
bmdd_fit_on_combo <- readRDS("bmdd_fit_on_combo.rds")
fit <- bmdd_fit_on_combo$res[[s]]
pi <- fit$pi
alp0 <- fit$alpha$alp0
alp1 <- fit$alpha$alp1
Z <- NULL
U <- NULL
if(s == 2) {
Z <- bmdd_fit_on_combo$cova$Z1
} else if(s == 3) {
Z <- bmdd_fit_on_combo$cova$Z2
} else if(s == 4) {
U <- bmdd_fit_on_combo$cova$U1
} else if(s == 5) {
U <- bmdd_fit_on_combo$cova$U2
}
if(type == 'Theoretical2') {
fun <- function(s, alp) {
if(s == 2) {
Z1 <- as.integer(as.factor(Z)) - 1
Y1 <- t(log(alp))
X1 <- rbind(rep(1, n), Z1)
} else if(s == 3) {
Z1 <- Z
Y1 <- t(log(alp))
X1 <- rbind(rep(1, n), Z1)
} else if(s == 4) {
Z1 <- as.integer(as.factor(U)) - 1
Y1 <- log(alp)
X1 <- rbind(rep(1, m), Z1)
} else if(s == 5) {
Z1 <- U
Y1 <- log(alp)
X1 <- rbind(rep(1, m), Z1)
}
regr <- coef(lm(Y1 ~ Z1))
regr[1, ] <- regr[1, ] / 2
regr[2, ] <- regr[2, ] + abs(regr[1, ]) * (regr[2, ] > 0) -
abs(regr[1, ]) * (regr[2, ] < 0)
alp <- exp(t(regr) %*% X1)
if(s %in% c(4, 5)) {
alp <- t(alp)
}
return(alp)
}
alp0 <- fun(s, alp0)
alp1 <- fun(s, alp1)
}
} else if(type == 'Non-parametric') {
rds <- readRDS('CDI_IBD_RA_SMOKE.rds')
if (ref == 'CDI') {
otu.tab <- rds$CDI.otu
} else if(ref == 'IBD') {
otu.tab <- rds$IBD.otu
} else if(ref == 'RA') {
otu.tab <- rds$RA.otu
} else if(ref == 'SMOKE') {
otu.tab <- rds$SMOKE.otu
}
}
output <- foreach(ii = 1 : nsim, .combine = 'rbind') %dopar% {
library(BMDD)
# library(mbDenoise)
# library(mbImpute)
# library(SAVER)
# library(scImpute)
# library(ALRA)
library(DirichletMultinomial)
library(DescTools)
library(gdata)
source('competing_fun.R')
source('evaluate_fun.R')
set.seed(ii)
if(type == 'Theoretical') {
source('data_generation.R')
data <- data.generation(alp0, alp1, pi, m, n, a, b, q, r, Z, U)
} else if(type == 'Correlation') {
source('data_generation2.R')
data <- data.generation2(m, n, a, b, q, r, model)
} else if(type == 'Non-parametric') {
source('data_generation3.R')
data <- data.generation3(otu.tab, m, n, a, b, q, r)
} else if(type == 'Theoretical2') {
source('data_generation.R')
data <- data.generation(alp0, alp1, pi, m, n, a, b, q, r, Z, U)
}
W <- data$W
X <- data$X
Z <- data$Z
U <- data$U
if(!is.null(Z)) Z <- data.frame(Z)
if(!is.null(U)) U <- data.frame(U)
Xhat.list <- competing.fun(W, Z, U, scImpute.folder = scImpute.folder, ii = ii)
res <- evaluate.fun(Xhat.list, X)
##########
Xhat <- Xhat.list[[1]]
corXhat <- array(1, c(m, m))
tmp <- (lowerTriangle(corXhat) - lowerTriangle(cor(t(X)))) ^ 2
Mtt <- mean(tmp)
Mtt.r <- median(tmp)
res[c(3, 20, 17, 34), 1] <- c(NA, NA, Mtt, Mtt.r)
##########
saveRDS(list(W = W, X = X, Xhat.list = Xhat.list, res = res),
paste0(output.folder, ii, ".rds"))
}
if(type %in% c('Theoretical', 'Correlation', 'Theoretical2')) {
scImpute.folder <- paste0('scImpute/', setup, '/m_', m, '_n_', n, '_a_', a,
'_b_', b, '_q_', q, '_r_', r, '/')
output.folder <- paste0('output/', setup, '/m_', m, '_n_', n, '_a_', a,
'_b_', b, '_q_', q, '_r_', r, '/')
} else if(type == 'Non-parametric') {
scImpute.folder <- paste0('scImpute/', setup, '/m_', m, '_n_', n, '/')
output.folder <- paste0('output/', setup, '/m_', m, '_n_', n, '/')
}
if(!dir.exists(scImpute.folder)) dir.create(scImpute.folder)
if(!dir.exists(output.folder)) dir.create(output.folder)
if(type %in% c('Theoretical', 'Theoretical2')) {
bmdd_fit_on_combo <- readRDS("bmdd_fit_on_combo.rds")
fit <- bmdd_fit_on_combo$res[[s]]
pi <- fit$pi
alp0 <- fit$alpha$alp0
alp1 <- fit$alpha$alp1
Z <- NULL
U <- NULL
if(s == 2) {
Z <- bmdd_fit_on_combo$cova$Z1
} else if(s == 3) {
Z <- bmdd_fit_on_combo$cova$Z2
} else if(s == 4) {
U <- bmdd_fit_on_combo$cova$U1
} else if(s == 5) {
U <- bmdd_fit_on_combo$cova$U2
}
if(type == 'Theoretical2') {
fun <- function(s, alp) {
if(s == 2) {
Z1 <- as.integer(as.factor(Z)) - 1
Y1 <- t(log(alp))
X1 <- rbind(rep(1, n), Z1)
} else if(s == 3) {
Z1 <- Z
Y1 <- t(log(alp))
X1 <- rbind(rep(1, n), Z1)
} else if(s == 4) {
Z1 <- as.integer(as.factor(U)) - 1
Y1 <- log(alp)
X1 <- rbind(rep(1, m), Z1)
} else if(s == 5) {
Z1 <- U
Y1 <- log(alp)
X1 <- rbind(rep(1, m), Z1)
}
regr <- coef(lm(Y1 ~ Z1))
regr[1, ] <- regr[1, ] / 2
regr[2, ] <- regr[2, ] + abs(regr[1, ]) * (regr[2, ] > 0) -
abs(regr[1, ]) * (regr[2, ] < 0)
alp <- exp(t(regr) %*% X1)
if(s %in% c(4, 5)) {
alp <- t(alp)
}
return(alp)
}
alp0 <- fun(s, alp0)
alp1 <- fun(s, alp1)
}
} else if(type == 'Non-parametric') {
rds <- readRDS('CDI_IBD_RA_SMOKE.rds')
if (ref == 'CDI') {
otu.tab <- rds$CDI.otu
} else if(ref == 'IBD') {
otu.tab <- rds$IBD.otu
} else if(ref == 'RA') {
otu.tab <- rds$RA.otu
} else if(ref == 'SMOKE') {
otu.tab <- rds$SMOKE.otu
}
}
output <- foreach(ii = 1 : nsim, .combine = 'rbind') %do% {
library(BMDD)
# library(mbDenoise)
# library(mbImpute)
# library(SAVER)
# library(scImpute)
# library(ALRA)
library(DirichletMultinomial)
library(DescTools)
library(gdata)
source('competing_fun.R')
source('evaluate_fun.R')
set.seed(ii)
if(type == 'Theoretical') {
source('data_generation.R')
data <- data.generation(alp0, alp1, pi, m, n, a, b, q, r, Z, U)
} else if(type == 'Correlation') {
source('data_generation2.R')
data <- data.generation2(m, n, a, b, q, r, model)
} else if(type == 'Non-parametric') {
source('data_generation3.R')
data <- data.generation3(otu.tab, m, n, a, b, q, r)
} else if(type == 'Theoretical2') {
source('data_generation.R')
data <- data.generation(alp0, alp1, pi, m, n, a, b, q, r, Z, U)
}
W <- data$W
X <- data$X
Z <- data$Z
U <- data$U
if(!is.null(Z)) Z <- data.frame(Z)
if(!is.null(U)) U <- data.frame(U)
Xhat.list <- competing.fun(W, Z, U, scImpute.folder = scImpute.folder, ii = ii)
res <- evaluate.fun(Xhat.list, X)
##########
Xhat <- Xhat.list[[1]]
corXhat <- array(1, c(m, m))
tmp <- (lowerTriangle(corXhat) - lowerTriangle(cor(t(X)))) ^ 2
Mtt <- mean(tmp)
Mtt.r <- median(tmp)
res[c(3, 20, 17, 34), 1] <- c(NA, NA, Mtt, Mtt.r)
##########
saveRDS(list(W = W, X = X, Xhat.list = Xhat.list, res = res),
paste0(output.folder, ii, ".rds"))
}
nsim <- 10
m <- 100
n <- 80
a <- 1000
b <- 0.5
q <- 6
r <- 0
###########################
type <- 'Theoretical'
s <- 1
setup <- 'S1'
source('simu_fun.R')
source('simu_fun.R')
i=1
res <- readRDS(paste0(output.folder, i, ".rds"))
nsim <- 10
m <- 100
n <- 80
a <- 1000
b <- 0.5
q <- 6
r <- 0
###########################
type <- 'Theoretical'
s <- 1
setup <- 'S1'
output.folder <- paste0('output/', setup, '/m_', m, '_n_', n, '_a_', a,
'_b_', b, '_q_', q, '_r_', r, '/')
res <- readRDS(paste0(output.folder, i, ".rds"))
res
res$res
output.raw <- foreach(i = 1 : nsim, .combine = 'rbind') %do% {
res <- readRDS(paste0(output.folder, i, ".rds"))
res$res
}
library(foreach)
output.raw <- foreach(i = 1 : nsim, .combine = 'rbind') %do% {
res <- readRDS(paste0(output.folder, i, ".rds"))
res$res
}
output.raw
s <- nrow(output.raw) / nsim
k <- s / 2
output <- foreach (i = 1 : s, .combine = 'rbind') %do% {
res <- output.raw[seq(i, nsim * s, s), ]
est <- colMeans(res, na.rm = TRUE)
num.nan <- colSums(matrix(!is.na(res), nrow = nsim))
est.sd <- sqrt(rowSums((t(res) - est) ^ 2, na.rm = TRUE) / ((num.nan - 1) * num.nan))
return(c(est, est.sd))
}
s
i=1
res <- output.raw[seq(i, nsim * s, s), ]
res
est <- colMeans(res, na.rm = TRUE)
output.raw <- foreach(i = 1 : nsim, .combine = 'cbind') %do% {
res <- readRDS(paste0(output.folder, i, ".rds"))
res$res
}
output.raw
output.raw.use <- output.raw[-c(2, 3, 18 : 34), ]
output.raw.use
(output.raw.use - est) ^ 2
dim(output.raw)
output.raw <- foreach(i = 1 : nsim, .combine = 'cbind') %do% {
res <- readRDS(paste0(output.folder, i, ".rds"))
res$res
}
output.raw.use <- output.raw[-c(2, 3, 18 : 34), ]
est <- rowMeans(output.raw.use
)
est
nsim
rowSums((output.raw.use - est) ^ 2)
rowSums((output.raw.use - est) ^ 2) / ((nsim - 1) * nsim)
sqrt(rowSums((output.raw.use - est) ^ 2) / ((nsim - 1) * nsim))
est
output.folder
output.raw <- foreach(i = 1 : nsim, .combine = 'cbind') %do% {
res <- readRDS(paste0(output.folder, i, ".rds"))
res$res
}
output.raw
output.raw.use <- output.raw[-c(2, 3, 18 : 34), ]
est <- rowMeans(output.raw.use)
est
est.sd <-  sqrt(rowSums((output.raw.use - est) ^ 2) / ((nsim - 1) * nsim))
saveRDS(cbind(est, est.sd), paste0(output.folder, "result_dmm_1_diri_mix.rds"))
cbind(est, est.sd)
M <- cbind(est, est.sd)
M <- ifelse(output > .001, sprintf("%.4f", output), sprintf("%.2e", output))
output <- cbind(est, est.sd)
M <- ifelse(output > .001, sprintf("%.4f", output), sprintf("%.2e", output))
M[, (l + 1) : (2 * l)] <- parentheses(M[, (l + 1) : (2 * l)])
M
output.raw <- foreach(i = 1 : nsim, .combine = 'cbind') %do% {
res <- readRDS(paste0(output.folder, i, ".rds"))
res$res
}
output.raw.use <- output.raw[-c(2, 3, 18 : 34), ]
est <- rowMeans(output.raw.use)
est.sd <-  sqrt(rowSums((output.raw.use - est) ^ 2) / ((nsim - 1) * nsim))
saveRDS(cbind(est, est.sd), paste0(output.folder, "result_dmm_1_diri_mix.rds"))
output <- cbind(est, est.sd)
M <- ifelse(output > .001, sprintf("%.4f", output), sprintf("%.2e", output))
M
nsim <- 10
m <- 100
n <- 80
a <- 1000
b <- 0.5
q <- 6
r <- 0
###########################
type <- 'Theoretical'
s <- 1
setup <- 'S1'
if(type %in% c('Theoretical', 'Correlation', 'Theoretical2')) {
# scImpute.folder <- paste0('scImpute/', setup, '/m_', m, '_n_', n, '_a_', a,
#                           '_b_', b, '_q_', q, '_r_', r, '/')
output.folder <- paste0('output/', setup, '/m_', m, '_n_', n, '_a_', a,
'_b_', b, '_q_', q, '_r_', r, '/')
} else if(type == 'Non-parametric') {
# scImpute.folder <- paste0('scImpute/', setup, '/m_', m, '_n_', n, '/')
output.folder <- paste0('output/', setup, '/m_', m, '_n_', n, '/')
}
# if(!dir.exists(scImpute.folder)) dir.create(scImpute.folder)
if(!dir.exists(output.folder)) dir.create(output.folder)
if(type %in% c('Theoretical', 'Theoretical2')) {
bmdd_fit_on_combo <- readRDS("bmdd_fit_on_combo.rds")
fit <- bmdd_fit_on_combo$res[[s]]
pi <- fit$pi
alp0 <- fit$alpha$alp0
alp1 <- fit$alpha$alp1
Z <- NULL
U <- NULL
if(s == 2) {
Z <- bmdd_fit_on_combo$cova$Z1
} else if(s == 3) {
Z <- bmdd_fit_on_combo$cova$Z2
} else if(s == 4) {
U <- bmdd_fit_on_combo$cova$U1
} else if(s == 5) {
U <- bmdd_fit_on_combo$cova$U2
}
if(type == 'Theoretical2') {
fun <- function(s, alp) {
if(s == 2) {
Z1 <- as.integer(as.factor(Z)) - 1
Y1 <- t(log(alp))
X1 <- rbind(rep(1, n), Z1)
} else if(s == 3) {
Z1 <- Z
Y1 <- t(log(alp))
X1 <- rbind(rep(1, n), Z1)
} else if(s == 4) {
Z1 <- as.integer(as.factor(U)) - 1
Y1 <- log(alp)
X1 <- rbind(rep(1, m), Z1)
} else if(s == 5) {
Z1 <- U
Y1 <- log(alp)
X1 <- rbind(rep(1, m), Z1)
}
regr <- coef(lm(Y1 ~ Z1))
regr[1, ] <- regr[1, ] / 2
regr[2, ] <- regr[2, ] + abs(regr[1, ]) * (regr[2, ] > 0) -
abs(regr[1, ]) * (regr[2, ] < 0)
alp <- exp(t(regr) %*% X1)
if(s %in% c(4, 5)) {
alp <- t(alp)
}
return(alp)
}
alp0 <- fun(s, alp0)
alp1 <- fun(s, alp1)
}
} else if(type == 'Non-parametric') {
rds <- readRDS('CDI_IBD_RA_SMOKE.rds')
if (ref == 'CDI') {
otu.tab <- rds$CDI.otu
} else if(ref == 'IBD') {
otu.tab <- rds$IBD.otu
} else if(ref == 'RA') {
otu.tab <- rds$RA.otu
} else if(ref == 'SMOKE') {
otu.tab <- rds$SMOKE.otu
}
}
library(foreach)
# library(BMDD)
# library(mbDenoise)
# library(mbImpute)
# library(SAVER)
# library(scImpute)
# library(ALRA)
library(DirichletMultinomial)
library(DescTools)
library(gdata)
source('competing_fun.R')
source('evaluate_fun.R')
ii=1
set.seed(ii)
if(type == 'Theoretical') {
source('data_generation.R')
data <- data.generation(alp0, alp1, pi, m, n, a, b, q, r, Z, U)
} else if(type == 'Correlation') {
source('data_generation2.R')
data <- data.generation2(m, n, a, b, q, r, model)
} else if(type == 'Non-parametric') {
source('data_generation3.R')
data <- data.generation3(otu.tab, m, n, a, b, q, r)
} else if(type == 'Theoretical2') {
source('data_generation.R')
data <- data.generation(alp0, alp1, pi, m, n, a, b, q, r, Z, U)
}
W <- data$W
X <- data$X
Xhat.list <- competing.fun(W)
res <- evaluate.fun(Xhat.list, X)
##########
Xhat <- Xhat.list[[1]]
corXhat <- array(1, c(m, m))
tmp <- (lowerTriangle(corXhat) - lowerTriangle(cor(t(X)))) ^ 2
Mtt <- mean(tmp)
Mtt.r <- median(tmp)
res[c(3, 20, 17, 34), 1] <- c(NA, NA, Mtt, Mtt.r)
res
list(W = W, X = X, Xhat.list = Xhat.list, res = res)
